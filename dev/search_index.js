var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Automatic-Differentiation-Choices","page":"Usage","title":"Automatic Differentiation Choices","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"While one can fully define all of the derivative functions associated with nonlinear constrained optimization directly, in many cases it's easiest to just rely on automatic differentiation to derive those functions. In GalacticOptim.jl, you can provide as few functions as you want, or give a differentiation library choice.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"AutoForwardDiff()\nAutoReverseDiff(compile=false)\nAutoTracker()\nAutoZygote()\nAutoFiniteDiff()\nAutoModelingToolkit()","category":"page"},{"location":"usage/#API-Documentation","page":"Usage","title":"API Documentation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"OptimizationFunction(f, AutoForwardDiff();\n                     grad = nothing,\n                     hes = nothing,\n                     hv = nothing,\n                     chunksize = 1)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"OptimizationProblem(f, x, p = DiffEqBase.NullParameters(),;\n                    lb = nothing,\n                    ub = nothing)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"solve(prob,alg;kwargs...)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Keyword arguments:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"maxiters (the maximum number of iterations)\nabstol (absolute tolerance)\nreltol (relative tolerance)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":" using GalacticOptim, Optim\n rosenbrock(x,p) =  (p[1] - x[1])^2 + p[2] * (x[2] - x[1]^2)^2\n x0 = zeros(2)\n p  = [1.0,100.0]\n\n prob = OptimizationProblem(rosenbrock,x0,p)\n sol = solve(prob,NelderMead())\n\n\n using BlackBoxOptim\n prob = OptimizationProblem(rosenbrock, x0, p, lb = [-1.0,-1.0], ub = [1.0,1.0])\n sol = solve(prob,BBO())","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that Optim.jl is a core dependency of GalaticOptim.jl. However, BlackBoxOptim.jl is not and must already be installed (see the list above).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Warning: The output of the second optimization task (BBO()) is currently misleading in the sense that it returns Status: failure (reached maximum number of iterations). However, convergence is actually reached and the confusing message stems from the reliance on the Optim.jl output  struct (where the situation of reaching the maximum number of iterations is rightly regarded as a failure). The improved output struct will soon be implemented.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The output of the first optimization task (with the NelderMead() algorithm) is given below:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"* Status: success\n\n* Candidate solution\n   Final objective value:     3.525527e-09\n\n* Found with\n   Algorithm:     Nelder-Mead\n\n* Convergence measures\n   √(Σ(yᵢ-ȳ)²)/n ≤ 1.0e-08\n\n* Work counters\n   Seconds run:   0  (vs limit Inf)\n   Iterations:    60\n   f(x) calls:    118","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also explore other methods in a similar way:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":" f = OptimizationFunction(rosenbrock, GalacticOptim.AutoForwardDiff())\n prob = OptimizationProblem(f, x0, p)\n sol = solve(prob,BFGS())","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For instance, the above optimization task produces the following output:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"* Status: success\n\n* Candidate solution\n   Final objective value:     7.645684e-21\n\n* Found with\n   Algorithm:     BFGS\n\n* Convergence measures\n   |x - x'|               = 3.48e-07 ≰ 0.0e+00\n   |x - x'|/|x'|          = 3.48e-07 ≰ 0.0e+00\n   |f(x) - f(x')|         = 6.91e-14 ≰ 0.0e+00\n   |f(x) - f(x')|/|f(x')| = 9.03e+06 ≰ 0.0e+00\n   |g(x)|                 = 2.32e-09 ≤ 1.0e-08\n\n* Work counters\n   Seconds run:   0  (vs limit Inf)\n   Iterations:    16\n   f(x) calls:    53\n   ∇f(x) calls:   53","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":" prob = OptimizationProblem(f, x0, p, lb = [-1.0,-1.0], ub = [1.0,1.0])\n sol = solve(prob, Fminbox(GradientDescent()))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The examples clearly demonstrate that GalacticOptim.jl provides an intuitive way of specifying optimization tasks and offers a relatively easy access to a wide range of optimization algorithms.","category":"page"},{"location":"#GalacticOptim.jl","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl","text":"","category":"section"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"GalacticOptim.jl is a package with a scope that is beyond your normal global optimization package. GalacticOptim.jl seeks to bring together all of the optimization packages it can find, local and global, into one unified Julia interface. This means, you learn one package and you learn them all! GalacticOptim.jl adds a few high-level features, such as integrating with automatic differentiation, to make its usage fairly simple for most cases, while allowing all of the options in a single unified interface.","category":"page"},{"location":"#Note:-This-package-is-still-in-development.-This-guide-is-currently-both-an-active-documentation-and-a-development-roadmap.","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"Note: This package is still in development. This guide is currently both an active documentation and a development roadmap.","text":"","category":"section"},{"location":"#Installation","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"Installation","text":"","category":"section"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"Assuming that you already have Julia correctly installed, it suffices to import GalacticOptim.jl in the standard way:","category":"page"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"import Pkg; Pkg.add(\"GalacticOptim\")","category":"page"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"The packages relevant to the core functionality of GalacticOptim.jl will be imported accordingly and, in most cases, you do not have to worry about the manual installation of dependencies. Below is the list of packages that need to be installed explicitly if you intend to use the specific optimization algorithms offered by them:","category":"page"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"BlackBoxOptim.jl (solver: BBO())\nNLopt.jl (usage via the NLopt API;","category":"page"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"see also the available algorithms)","category":"page"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"MultistartOptimization.jl","category":"page"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"(see also this documentation)","category":"page"},{"location":"","page":"GalacticOptim.jl: Unified Global Optimization Package","title":"GalacticOptim.jl: Unified Global Optimization Package","text":"QuadDIRECT.jl\nEvolutionary.jl (see also this documentation)\nCMAEvolutionStrategy.jl","category":"page"}]
}
